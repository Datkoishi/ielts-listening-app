 // Constants
const MAX_QUESTIONS = 40
const PARTS = 4

// Global variables
let selectedTypes = []
let currentPart = 1
let totalQuestions = 0
const audioFile = null
const audioDuration = 0
let test = {
  // Changed to let
  part1: [],
  part2: [],
  part3: [],
  part4: [],
}

// Placeholder functions -  These need to be implemented based on your actual requirements.
function fetchQuestionTypes() {
  // Your code to fetch question types from an API or other source.  For now, a sample implementation is provided.
  const questionTypes = [
    "One answer",
    "More than one answer",
    "Matching",
    "Plan/Map/Diagram labelling",
    "Note Completion",
    "Form/Table Completion",
    "Flow chart Completion",
  ]
  const questionTypeContainer = document.getElementById("questionTypes") // Assumes you have a container with this ID in your HTML.
  questionTypes.forEach((type) => {
    const checkbox = document.createElement("input")
    checkbox.type = "checkbox"
    checkbox.value = type
    checkbox.id = type
    const label = document.createElement("label")
    label.htmlFor = type
    label.textContent = type
    questionTypeContainer.appendChild(checkbox)
    questionTypeContainer.appendChild(label)
    questionTypeContainer.appendChild(document.createElement("br"))
  })
}

function saveQuestionSet() {
  // Your code to save the question set.  This is a placeholder.
  console.log("Saving question set...")
  alert("Question set saved!")
}

// Add the saveT2ListeningExercise function
function saveT2ListeningExercise() {
  try {
    const form = document.getElementById("t2ListeningExerciseForm")
    if (!form) {
      throw new Error("Form not found")
    }

    // Get form data
    const instructions = document.getElementById("t2ListeningExerciseInstructions")?.value?.trim()
    const topic = document.getElementById("t2ListeningExerciseTopic")?.value?.trim()
    const questionCount = Number.parseInt(document.getElementById("t2ListeningExerciseQuestionCount")?.value || "0", 10)

    // Validate required fields
    if (!instructions || !topic || questionCount <= 0) {
      const missing = []
      if (!instructions) missing.push("Instructions")
      if (!topic) missing.push("Topic")
      if (questionCount <= 0) missing.push("Number of Questions")

      showMessage(`Please fill in all required fields: ${missing.join(", ")}`, "error")
      return
    }

    // Get questions and answers
    const questions = []
    const correctAnswers = []
    let hasErrors = false

    for (let i = 1; i <= questionCount; i++) {
      const questionText = document.getElementById(`t2ListeningExerciseQuestion${i}`)?.value?.trim()
      const answerInputs = document.querySelectorAll(
        `#t2ListeningExerciseCorrectAnswers${i} .t2-listening-exercise-correct-answer-input`,
      )

      if (!questionText || questionText === "") {
        showMessage(`Question ${i} text is required`, "error")
        hasErrors = true
        continue
      }

      // Validate that question contains [ANSWER] placeholders
      const answerCount = (questionText.match(/\[ANSWER\]/g) || []).length
      if (answerCount === 0) {
        showMessage(`Question ${i} must contain at least one [ANSWER] placeholder`, "error")
        hasErrors = true
        continue
      }

      // Get correct answers
      const answers = Array.from(answerInputs).map((input) => input.value?.trim())
      if (answers.some((answer) => !answer)) {
        showMessage(`All correct answers for Question ${i} must be filled`, "error")
        hasErrors = true
        continue
      }

      if (answers.length !== answerCount) {
        showMessage(`Number of answers doesn't match number of [ANSWER] placeholders in Question ${i}`, "error")
        hasErrors = true
        continue
      }

      questions.push(questionText)
      correctAnswers.push(...answers)
    }

    if (hasErrors) {
      return
    }

    // Create question object
    const questionData = {
      type: "Note Completion",
      content: [instructions, topic, ...questions],
      correctAnswers,
    }

    // Add to test object
    const part = Math.ceil(totalQuestions / 10) || 1
    if (part >= 1 && part <= 4) {
      if (!test[`part${part}`]) {
        test[`part${part}`] = []
      }
      test[`part${part}`].push(questionData)
      totalQuestions += questionCount
    }

    console.log("Saved Note Completion question:", questionData)
    showMessage("Exercise saved successfully!", "success")

    // Reset form
    form.reset()
    updateT2ListeningExercisePreview()
  } catch (error) {
    console.error("Error saving Note Completion exercise:", error)
    showMessage(`Error saving exercise: ${error.message}`, "error")
  }
}

// Update the preview function
function updateT2ListeningExercisePreview() {
  try {
    const previewContent = document.getElementById("t2ListeningExercisePreviewContent")
    if (!previewContent) {
      console.warn("Preview content container not found")
      return
    }

    const instructions = document.getElementById("t2ListeningExerciseInstructions")?.value || ""
    const topic = document.getElementById("t2ListeningExerciseTopic")?.value || ""
    const questionCount = Number.parseInt(document.getElementById("t2ListeningExerciseQuestionCount")?.value || "0", 10)

    let previewHTML = `
      <div class="preview-section">
        <h3>${topic}</h3>
        <p class="instructions">${instructions}</p>
        <div class="questions">
    `

    for (let i = 1; i <= questionCount; i++) {
      const questionText = document.getElementById(`t2ListeningExerciseQuestion${i}`)?.value || ""
      const formattedQuestion = questionText.replace(/\[ANSWER\]/g, "___________")

      previewHTML += `
        <div class="question">
          <p>${i}. ${formattedQuestion}</p>
        </div>
      `
    }

    previewHTML += `
        </div>
      </div>
    `

    previewContent.innerHTML = previewHTML
    console.log("Preview updated successfully")
  } catch (error) {
    console.error("Error updating preview:", error)
  }
}

document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("startTestBtn").addEventListener("click", startTestCreation)
  document.getElementById("previousPartBtn").addEventListener("click", previousPart)
  document.getElementById("nextPartBtn").addEventListener("click", nextPart)
  document.getElementById("saveTestBtn").addEventListener("click", saveTest)

  const previewTestBtn = document.createElement("button")
  previewTestBtn.id = "previewTestBtn"
  previewTestBtn.textContent = "Preview Test"
  previewTestBtn.addEventListener("click", previewEntireTest)
  document.getElementById("testCreationPage").appendChild(previewTestBtn)

  const exportTestBtn = document.createElement("button")
  exportTestBtn.id = "exportTestBtn"
  exportTestBtn.textContent = "Export Test"
  exportTestBtn.addEventListener("click", exportTest)
  document.getElementById("testCreationPage").appendChild(exportTestBtn)

  const importTestBtn = document.createElement("button")
  importTestBtn.id = "importTestBtn"
  importTestBtn.textContent = "Import Test"
  importTestBtn.addEventListener("click", importTest)
  document.getElementById("testCreationPage").appendChild(importTestBtn)

  // Thêm nút để lưu bộ câu hỏi
  const saveQuestionSetBtn = document.createElement("button")
  saveQuestionSetBtn.id = "saveQuestionSetBtn"
  saveQuestionSetBtn.textContent = "Lưu bộ câu hỏi"
  saveQuestionSetBtn.addEventListener("click", saveQuestionSet)
  document.getElementById("testCreationPage").appendChild(saveQuestionSetBtn)

  // Gọi hàm để lấy danh sách loại câu hỏi khi trang được tải
  fetchQuestionTypes()
})

function startTestCreation() {
  selectedTypes = Array.from(document.querySelectorAll('input[type="checkbox"]:checked')).map((cb) => cb.value)
  if (selectedTypes.length === 0) {
    alert("Please select at least one question type.")
    return
  }
  document.getElementById("selectionPage").classList.add("hidden")
  document.getElementById("testCreationPage").classList.remove("hidden")
  renderTestCreation()
}

function renderTestCreation() {
  const testContent = document.getElementById("testContent")
  if (!testContent) {
    console.error("Test content container not found")
    return
  }

  testContent.innerHTML = `
    <div class="part-header">
      <h2><i class="fas fa-list-ol"></i> Part ${currentPart}</h2>
      <div class="question-count"><i class="fas fa-question-circle"></i> Total Questions: ${totalQuestions}/40</div>
    </div>
  `

  // Create all part containers if they don't exist
  for (let i = 1; i <= 4; i++) {
    if (!document.getElementById(`part${i}`)) {
      const part = document.createElement("div")
      part.className = "part"
      part.id = `part${i}`
      part.style.display = i === currentPart ? "block" : "none"
      testContent.appendChild(part)
    }
  }

  const currentPartElement = document.getElementById(`part${currentPart}`)
  if (currentPartElement) {
    currentPartElement.style.display = "block"
    renderQuestionTypes(currentPartElement)
  }
}

function renderQuestionTypes(container) {
  selectedTypes.forEach((type) => {
    const questionDiv = document.createElement("div")
    questionDiv.className = "question"
    questionDiv.innerHTML = `
            <h3>${getIconForType(type)} ${type}</h3>
            <button onclick="addQuestion('${type}', ${currentPart})"><i class="fas fa-plus"></i> Add ${type} Question</button>
        `
    container.appendChild(questionDiv)
  })
}

function getIconForType(type) {
  const icons = {
    "One answer": '<i class="fas fa-check-circle"></i>',
    "More than one answer": '<i class="fas fa-check-double"></i>',
    Matching: '<i class="fas fa-link"></i>',
    "Plan/Map/Diagram labelling": '<i class="fas fa-map-marker-alt"></i>',
    "Note Completion": '<i class="fas fa-sticky-note"></i>',
    "Form/Table Completion": '<i class="fas fa-table"></i>',
    "Flow chart Completion": '<i class="fas fa-project-diagram"></i>',
  }
  return icons[type] || '<i class="fas fa-question"></i>'
}

function addQuestion(type, partNumber) {
  if (totalQuestions >= 40) {
    alert("You have reached the maximum limit of 40 questions.")
    return
  }

  const part = document.getElementById(`part${partNumber}`)
  const questionNumber = totalQuestions + 1
  const questionDiv = document.createElement("div")
  questionDiv.className = "question"

  // Add the question type header
  const typeHeader = document.createElement("h3")
  typeHeader.textContent = type
  questionDiv.appendChild(typeHeader)

  // Add question number and delete button
  questionDiv.innerHTML += `
    <h4><i class="fas fa-question-circle"></i> Question ${questionNumber}</h4>
    <button class="delete-question" onclick="deleteQuestion(this)"><i class="fas fa-trash"></i></button>
  `

  // Add the appropriate form based on type
  switch (type) {
    case "One answer":
      questionDiv.innerHTML += createOneAnswerForm()
      break
    case "More than one answer":
      questionDiv.innerHTML += createMultipleAnswerForm()
      break
    case "Matching":
      questionDiv.innerHTML += createMatchingForm()
      break
    case "Plan/Map/Diagram labelling":
      questionDiv.innerHTML += createPlanMapDiagramForm()
      break
    case "Note Completion":
      questionDiv.innerHTML += createNoteCompletionForm()
      break
    case "Form/Table Completion":
      questionDiv.innerHTML += createFormTableCompletionForm()
      break
    case "Flow chart Completion":
      questionDiv.innerHTML += createFlowChartCompletionForm()
      break
    default:
      console.error("Unknown question type:", type)
      return
  }

  part.appendChild(questionDiv)
  totalQuestions++
  updateQuestionCount()

  // Initialize form functionality based on type
  switch (type) {
    case "One answer":
      initializeOneAnswerForm(questionDiv)
      break
    case "More than one answer":
      initializeMultipleAnswerForm(questionDiv)
      break
    case "Matching":
      initializeMatchingForm(questionDiv)
      break
    case "Plan/Map/Diagram labelling":
      initializePlanMapDiagram(questionDiv)
      break
    case "Note Completion":
      initializeNoteCompletionForm(questionDiv)
      break
    case "Form/Table Completion":
      initializeFormTableCompletionForm(questionDiv)
      break
    case "Flow chart Completion":
      initializeFlowChartCompletionForm(questionDiv)
      break
  }
}

function deleteQuestion(button) {
  const questionDiv = button.closest(".question")
  questionDiv.remove()
  totalQuestions--
  updateQuestionCount()
  renumberQuestions()
}

function renumberQuestions() {
  const questions = document.querySelectorAll(".question h4")
  questions.forEach((question, index) => {
    question.innerHTML = `<i class="fas fa-question-circle"></i> Question ${index + 1}`
  })
}

function updateQuestionCount() {
  const countElement = document.querySelector(".question-count")
  countElement.innerHTML = `<i class="fas fa-question-circle"></i> Total Questions: ${totalQuestions}/40`
}

function previousPart() {
  if (currentPart > 1) {
    currentPart--
    renderTestCreation()
  }
}

function nextPart() {
  if (currentPart < 4) {
    currentPart++
    renderTestCreation()
  }
}

function saveTest() {
  try {
    for (let i = 1; i <= 4; i++) {
      let part = document.getElementById(`part${i}`)
      if (!part) {
        console.warn(`Creating missing part ${i} container`)
        part = document.createElement("div")
        part.id = `part${i}`
        part.className = "part"
        document.getElementById("testContent").appendChild(part)
      }

      const questions = part.querySelectorAll(".question")
      test[`part${i}`] = Array.from(questions).map((q) => {
        // Get the question type from the closest h3 element
        const typeElement = q.querySelector("h3")
        const type = typeElement ? typeElement.textContent.replace(/[^a-zA-Z\s/-]/g, "").trim() : "Unknown"

        // Get the form element
        const form = q.querySelector("form")
        if (!form) {
          console.warn("Form not found in question")
          return { type, content: [], correctAnswers: [] }
        }

        // Get question content based on type
        let content = []
        let correctAnswers = []

        try {
          switch (type) {
            case "One answer": {
              const questionText = form.querySelector("#t3-questionText")?.value || ""
              const options =
                form
                  .querySelector("#t3-options")
                  ?.value.split("\n")
                  .filter((o) => o.trim()) || []
              const correctAnswer = form.querySelector("#t3-correctAnswer")?.value || ""
              content = [questionText, ...options]
              correctAnswers = correctAnswer
              break
            }
            case "More than one answer": {
              const questionText = form.querySelector("#t4-questionText")?.value || ""
              const options =
                form
                  .querySelector("#t4-options")
                  ?.value.split("\n")
                  .filter((o) => o.trim()) || []
              const answers = form.querySelector("#t4-correctAnswers")?.value || ""
              content = [questionText, ...options]
              correctAnswers = answers
                .split(",")
                .map((a) => a.trim())
                .filter((a) => a)
              break
            }
            case "Matching": {
              const title = form.querySelector('[id^="t3-questionTitle"]')?.value || ""
              const people =
                form
                  .querySelector('[id^="t3-people"]')
                  ?.value.split("\n")
                  .filter((p) => p.trim()) || []
              const responsibilities =
                form
                  .querySelector('[id^="t3-responsibilities"]')
                  ?.value.split("\n")
                  .filter((r) => r.trim()) || []
              const answers =
                form
                  .querySelector('[id^="t3-correctAnswers"]')
                  ?.value.split("\n")
                  .filter((a) => a.trim()) || []
              content = [title, ...people, ...responsibilities]
              correctAnswers = answers
              break
            }
            case "Plan/Map/Diagram labelling": {
              const questionType = form.querySelector("#questionType")?.value || ""
              const instructions = form.querySelector("#instructions")?.value || ""
              const imageElement = form.querySelector("img")
              const imageUrl = imageElement ? imageElement.src : ""
              const answers = Array.from(form.querySelectorAll('[id^="answer"]')).map((el) => el.value || "")
              let correctAnswers = Array.from(form.querySelectorAll('[id^="correctAnswer"]')).map(
                (el) => el.value || "",
              )

              content = [questionType, instructions]
              if (imageUrl) {
                content.push(imageUrl)
              }
              content.push(...answers)
              correctAnswers = correctAnswers.filter((answer) => answer.trim() !== "")
              break
            }
            case "Note Completion": {
              const instructions = form.querySelector("#t2ListeningExerciseInstructions")?.value || ""
              const topic = form.querySelector("#t2ListeningExerciseTopic")?.value || ""
              const questions = Array.from(form.querySelectorAll('[id^="t2ListeningExerciseQuestion"]')).map(
                (el) => el.value,
              )
              const answers = Array.from(form.querySelectorAll(".t2-listening-exercise-correct-answer-input")).map(
                (el) => el.value,
              )
              content = [instructions, topic, ...questions]
              correctAnswers = answers
              break
            }
            case "Form/Table Completion": {
              const instruction = form.querySelector("#tableInstruction")?.value || ""
              const rows = Array.from(form.querySelectorAll("#fareTable tr")).slice(1) // Skip header row
              const tableData = rows.map((row) => {
                const inputs = row.querySelectorAll("input:not(.t6-correct-answer-input)")
                return Array.from(inputs).map((input) => input.value)
              })
              const answers = Array.from(form.querySelectorAll(".t6-correct-answer-input")).map((el) => el.value)
              content = [instruction, ...tableData]
              correctAnswers = answers
              break
            }
            case "Flow chart Completion": {
              const title = form.querySelector("#flowChartTitle")?.value || ""
              const instructions = form.querySelector("#flowChartInstructions")?.value || ""
              const flowItems =
                form
                  .querySelector("#flowChartItems")
                  ?.value.split("\n")
                  .filter((item) => item.trim()) || []
              const options =
                form
                  .querySelector("#flowChartOptions")
                  ?.value.split("\n")
                  .filter((item) => item.trim()) || []
              const answers =
                form
                  .querySelector("#flowChartAnswers")
                  ?.value.split(",")
                  .map((a) => a.trim()) || []
              content = [title, instructions, ...flowItems, ...options]
              correctAnswers = answers
              break
            }
            default:
              console.warn(`Unknown question type: ${type}`)
          }
        } catch (error) {
          console.error(`Error processing question type "${type}":`, error)
        }

        return {
          type,
          content,
          correctAnswers,
        }
      })
    }
    console.log("Test saved:", test)
    alert("Test saved successfully!")
  } catch (error) {
    console.error("Error saving test:", error)
    alert("Error saving test. Please check the console for details.")
  }
}

function getCorrectAnswers(questionElement) {
  if (!questionElement) {
    console.warn("Question element is null")
    return []
  }

  // Get the question type from the h3 element that contains the type header
  const typeElement = questionElement.querySelector("h3")
  if (!typeElement) {
    console.warn("Question type element (h3) not found")
    return []
  }

  // Extract only the question type text, removing any icons
  const type = typeElement.textContent.replace(/[^a-zA-Z\s/-]/g, "").trim()

  try {
    switch (type) {
      case "One answer": {
        const element = questionElement.querySelector("#t3-correctAnswer")
        return element?.value || ""
      }
      case "More than one answer": {
        const element = questionElement.querySelector("#t4-correctAnswers")
        return element?.value ? element.value.split(",").map((a) => a.trim()) : []
      }
      case "Matching": {
        const elements = questionElement.querySelectorAll('[id^="t3-correctAnswers"]')
        return Array.from(elements).map((el) => el?.value || "")
      }
      case "Plan/Map/Diagram labelling": {
        const elements = questionElement.querySelectorAll('[id^="correctAnswer"]')
        return Array.from(elements).map((el) => el?.value || "")
      }
      case "Note Completion": {
        const elements = questionElement.querySelectorAll(".t2-listening-exercise-correct-answer-input")
        return Array.from(elements).map((el) => el?.value || "")
      }
      case "Form/Table Completion": {
        const elements = questionElement.querySelectorAll(".t6-correct-answer-input")
        return Array.from(elements).map((el) => el?.value || "")
      }
      case "Flow chart Completion": {
        const element = questionElement.querySelector('[id^="correctAnswers"]')
        return element?.value ? element.value.split(",").map((a) => a.trim()) : []
      }
      default:
        console.warn(`Unknown question type: ${type}`)
        return []
    }
  } catch (error) {
    console.error(`Error processing answers for question type "${type}":`, error)
    return []
  }
}

function createOneAnswerForm() {
  return `
        <div class="t3-question-creator">
            <form class="t3-one-answer-form">
                <div class="t3-form-group">
                    <label for="t3-questionText">Question Text:</label>
                    <input type="text" id="t3-questionText" name="questionText" required>
                </div>
                <div class="t3-form-group">
                    <label for="t3-options">Options (one per line):</label>
                    <textarea id="t3-options" name="options" rows="4" required></textarea>
                </div>
                <div class="t3-form-group">
                    <label for="t3-correctAnswer">Correct Answer:</label>
                    <input type="text" id="t3-correctAnswer" name="correctAnswer" required>
                </div>
                <button type="submit">Create Question</button>
            </form>
            <div class="t3-preview">
                <h2>Question Preview</h2>
                <div id="t3-questionPreview"></div>
            </div>
        </div>
    `
}

function createMultipleAnswerForm() {
  return `
        <div class="t4-container">
            <form id="t4-questionForm">
                <div class="t4-form-group">
                    <label for="t4-questionText">Question Text:</label>
                    <input type="text" id="t4-questionText" name="questionText" required>
                </div>
                <div class="t4-form-group">
                    <label for="t4-options">Options (one per line):</label>
                    <textarea id="t4-options" name="options" rows="4" required></textarea>
                </div>
                <div class="t4-form-group">
                    <label for="t4-correctAnswers">Correct Answers (comma-separated numbers):</label>
                    <input type="text" id="t4-correctAnswers" name="correctAnswers" required>
                </div>
                <button type="submit">Create Question</button>
            </form>
            <div id="t4-previewArea"></div>
        </div>
    `
}

function createMatchingForm() {
  return `
        <div class="t3-question-creator">
            <form id="t3-questionForm">
                <div class="t3-form-group">
                    <label for="t3-numberOfQuestions">Number of Questions:</label>
                    <input type="number" id="t3-numberOfQuestions" name="numberOfQuestions" min="1" max="10" value="1" required>
                </div>
                <div id="t3-questionsContainer"></div>
                <button type="submit">Create Questions</button>
                <button type="button" id="t3-saveButton" class="t3-save-button">Save Questions</button>
            </form>
            <div id="t3-message" class="t3-message" style="display: none;"></div>
            <div class="t3-preview">
                <h2>Questions Preview</h2>
                <div id="t3-questionsPreview"></div>
            </div>
        </div>
    `
}

function createPlanMapDiagramForm() {
  return `
    <div class="t1-ielts-creator">
        <h1>Công cụ tạo câu hỏi IELTS Listening</h1>

        <div class="t1-instructions-section">
            <h2>Hướng dẫn tạo câu hỏi</h2>
            <ol class="t1-instructions-list">
                <li><strong>Chọn loại câu hỏi:</strong> Lựa chọn giữa Ghi nhãn Bản đồ, Sơ đồ Tàu, hoặc Sơ đồ Kỹ thuật.</li>
                <li><strong>Đặt số lượng câu hỏi:</strong> Quyết định số lượng câu hỏi bạn muốn tạo (1-10).</li>
                <li><strong>Viết hướng dẫn:</strong> Cung cấp hướng dẫn rõ ràng cho học viên làm theo.</li>
                <li><strong>Tải lên hình ảnh:</strong> Chọn hình ảnh phù hợp cho câu hỏi (bản đồ, sơ đồ tàu, hoặc sơ đồ kỹ thuật).</li>
                <li><strong>Thêm câu trả lời:</strong>
                    <ul>
                        <li>Đối với Ghi nhãn Bản đồ: Nhập tên địa điểm và chữ cái đúng (A-H).</li>
                        <li>Đối với Sơ đồ Tàu: Nhập tên khu vực và chữ cái hoặc số đúng.</li>
                        <li>Đối với Sơ đồ Kỹ thuật: Chỉ nhập câu trả lời đúng.</li>
                    </ul>
                </li>
                <li><strong>Xem lại và Gửi:</strong> Kiểm tra tất cả các mục nhập và nhấp vào "Thêm câu hỏi" để tạo câu hỏi.</li>
                <li><strong>Lưu câu hỏi:</strong> Sau khi tạo tất cả câu h" để tạo câu hỏi.</li>
                <li><strong>Lưu câu hỏi:</strong> Sau khi tạo tất cả câu hỏi, nhấp vào "Lưu câu hỏi" để gửi về hệ thống.</li>
            </ol>
        </div>

        <div class="t1-form-section">
            <h2>Tạo câu hỏi mới</h2>
            <form id="questionForm">
                <div class="t1-form-group">
                    <label for="questionType">Loại câu hỏi:</label>
                    <select id="questionType" required>
                        <option value="map">Ghi nhãn Bản đồ</option>
                        <option value="ship">Sơ đồ Tàu</option>
                        <option value="technical">Sơ đồ Kỹ thuật</option>
                    </select>
                </div>
                <div class="t1-form-group">
                    <label for="numQuestions">Số lượng câu hỏi:</label>
                    <input type="number" id="numQuestions" min="1" max="10" value="3" required>
                </div>
                <div class="t1-form-group">
                    <label for="instructions">Hướng dẫn:</label>
                    <textarea id="instructions" rows="3" required></textarea>
                </div>
                <div class="t1-form-group">
                    <label for="imageFile">Tải lên hình ảnh:</label>
                    <input type="file" id="imageFile" accept="image/*" required>
                </div>
                <div id="answerInputs">
                    <!-- Answer inputs will be dynamically added here -->
                </div>
                <button type="submit">Thêm câu hỏi</button>
            </form>
        </div>

        <div id="questionDisplay" class="t1-question-display">
            <h2>Câu hỏi đã tạo</h2>
            <!-- Questions will be dynamically added here -->
        </div>

        <div class="t1-save-button">
            <button id="saveQuestionsBtn">Lưu câu hỏi</button>
        </div>

        <div id="notification" class="t1-notification" style="display: none;"></div>
    </div>
    `
}

function createNoteCompletionForm() {
  return `
    <div class="t2-listening-exercise-app">
        <div class="t2-listening-exercise-container">
            <div class="t2-listening-exercise-form-container">
                <h2>Create Listening Exercise</h2>
                <div class="t2-listening-exercise-instructions-box">
                    <h3>Hướng dẫn đặt câu hỏi:</h3>
                    <ul>
                        <li>Sử dụng [ANSWER] để đánh dấu vị trí cần điền đáp án.</li>
                        <li>Bạn có thể đặt nhiều [ANSWER] trong một câu hỏi.</li>
                        <li>Ví dụ: "The dining table is [ANSWER] shape and [ANSWER] years old."</li>
                        <li>Mỗi [ANSWER] sẽ được chuyển thành một ô trống trong bài tập.</li>
                        <li>Nhập đáp án đúng cho mỗi [ANSWER] trong các ô bên dưới câu hỏi.</li>
                    </ul>
                </div>
                <form id="t2ListeningExerciseForm">
                    <div class="t2-listening-exercise-form-group">
                        <label for="t2ListeningExerciseInstructions">Instructions:</label>
                        <input type="text" id="t2ListeningExerciseInstructions" name="instructions" value="Complete the notes. Write ONE WORD AND/OR A NUMBER in each gap.">
                    </div>
                    <div class="t2-listening-exercise-form-group">
                        <label for="t2ListeningExerciseTopic">Topic:</label>
                        <input type="text" id="t2ListeningExerciseTopic" name="topic" value="Phone call about second-hand furniture">
                    </div>
                    <div class="t2-listening-exercise-form-group">
                        <label for="t2ListeningExerciseQuestionCount">Number of Questions:</label>
                        <input type="number" id="t2ListeningExerciseQuestionCount" name="questionCount" min="1" max="20" value="3">
                    </div>
                    <div id="t2ListeningExerciseQuestionContainer"></div>
                    <div class="t2-listening-exercise-button-group">
                        <button type="button" onclick="updateT2ListeningExercisePreview()">Update Preview</button>
                        <button type="button" class="t2-listening-exercise-save-button" onclick="saveT2ListeningExercise()">Save Exercise</button>
                    </div>
                    <div id="t2ListeningExerciseStatusMessage" class="t2-listening-exercise-status-message"></div>
                </form>
            </div>
            <div class="t2-listening-exercise-preview-container">
                <h2>Preview</h2>
                <div id="t2ListeningExercisePreviewContent">
                    <!-- Preview content will be inserted here -->
                </div>
            </div>
        </div>
    `
}

function createFlowChartCompletionForm() {
  return `
    <div class="t7-ielts-flow-chart-creator">
      <form id="flowChartForm" class="flow-chart-form">
        <div class="form-group">
          <label for="flowChartTitle">Title:</label>
          <input type="text" id="flowChartTitle" name="title" required>
        </div>
        
        <div class="form-group">
          <label for="flowChartInstructions">Instructions:</label>
          <textarea id="flowChartInstructions" name="instructions" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartItems">Flow Chart Items (one per line, use ___ for gaps):</label>
          <textarea id="flowChartItems" name="flowItems" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartOptions">Options (one per line):</label>
          <textarea id="flowChartOptions" name="options" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartAnswers">Correct Answers (comma-separated):</label>
          <input type="text" id="flowChartAnswers" name="correctAnswers" required>
        </div>

        <div class="button-group">
          <button type="submit" class="save-btn">Save Question</button>
          <button type="button" class="preview-btn">Preview</button>
        </div>
      </form>
      <div id="flowChartPreview" class="preview-section"></div>
    </div>
  `
}

function initializeOneAnswerForm(container) {
  const form = container.querySelector(".t3-one-answer-form")
  const preview = container.querySelector("#t3-questionPreview")

  form.addEventListener("submit", (e) => {
    e.preventDefault()
    const questionText = form.querySelector("#t3-questionText").value
    const options = form
      .querySelector("#t3-options")
      .value.split("\n")
      .filter((option) => option.trim() !== "")
    const correctAnswer = form.querySelector("#t3-correctAnswer").value

    preview.innerHTML = `
      <h3>${questionText}</h3>
      ${options
        .map(
          (option, index) => `
        <div>
          <input type="radio" id="option${index}" name="answer" value="${option}">
          <label for="option${index}">${option}</label>
          ${option === correctAnswer ? ' <span class="t3-correct-answer">(Correct)</span>' : ""}
        </div>
      `,
        )
        .join("")}
    `
  })
}

function initializeMultipleAnswerForm(container) {
  const form = container.querySelector("#t4-questionForm")
  const previewArea = container.querySelector("#t4-previewArea")

  form.addEventListener("submit", (e) => {
    e.preventDefault()

    const questionText = form.querySelector("#t4-questionText").value
    const options = form
      .querySelector("#t4-options")
      .value.split("\n")
      .filter((option) => option.trim() !== "")
    const correctAnswers = form
      .querySelector("#t4-correctAnswers")
      .value.split(",")
      .map((num) => Number.parseInt(num.trim()))

    previewArea.innerHTML = `
            <div class="t4-preview">
                <h2>${questionText}</h2>
                ${options
                  .map(
                    (option, index) => `
                    <label>
                        <input type="checkbox">
                        ${option}
                        ${correctAnswers.includes(index + 1) ? '<span class="t4-correct-answer"> (Correct)</span>' : ""}
                    </label>
                `,
                  )
                  .join("")}
            </div>
        `
  })
}

function initializeMatchingForm(container) {
  const form = container.querySelector("#t3-questionForm")
  const questionsContainer = container.querySelector("#t3-questionsContainer")
  const previewArea = container.querySelector("#t3-questionsPreview")
  const saveButton = container.querySelector("#t3-saveButton")

  form.querySelector("#t3-numberOfQuestions").addEventListener("change", (e) => {
    const count = Number.parseInt(e.target.value)
    questionsContainer.innerHTML = ""
    for (let i = 0; i < count; i++) {
      questionsContainer.innerHTML += createQuestionFields(i)
    }
  })

  form.addEventListener("submit", (e) => {
    e.preventDefault()
    updateMatchingPreview(container)
  })

  saveButton.addEventListener("click", () => {
    saveMatchingQuestions(container)
  })

  // Initialize with one question
  questionsContainer.innerHTML = createQuestionFields(0)
}

function initializePlanMapDiagram(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const questionForm = container.querySelector("#questionForm")
  if (!questionForm) {
    console.error("Question form not found")
    return
  }

  const questionDisplay = container.querySelector("#questionDisplay")
  const answerInputs = container.querySelector("#answerInputs")
  const numQuestionsInput = container.querySelector("#numQuestions")
  const questionTypeSelect = container.querySelector("#questionType")
  const imageFileInput = container.querySelector("#imageFile")
  const saveQuestionsBtn = container.querySelector("#saveQuestionsBtn")
  const notification = container.querySelector("#notification")
  const questions = []
  const startQuestionNumber = 1

  // Log elements for debugging
  console.log("Form elements:", {
    questionForm,
    questionDisplay,
    answerInputs,
    numQuestionsInput,
    questionTypeSelect,
    imageFileInput,
    saveQuestionsBtn,
    notification,
  })

  function updateAnswerInputs() {
    if (!answerInputs || !numQuestionsInput || !questionTypeSelect) {
      console.error("Required elements not found")
      return
    }

    const numQuestions = Number.parseInt(numQuestionsInput.value, 10)
    const questionType = questionTypeSelect.value
    answerInputs.innerHTML = ""

    for (let i = 0; i < numQuestions; i++) {
      const answerGroup = document.createElement("div")
      answerGroup.className = "t1-form-group"
      const questionNumber = startQuestionNumber + i

      if (questionType === "technical") {
        answerGroup.innerHTML = `
          <label for="correctAnswer${i}">Câu trả lời đúng cho câu ${questionNumber}:</label>
          <input type="text" id="correctAnswer${i}" required>
        `
      } else {
        answerGroup.innerHTML = `
          <label for="answer${i}">Câu trả lời ${questionNumber}:</label>
          <input type="text" id="answer${i}" required>
          <label for="correctAnswer${i}">Câu trả lời đúng cho câu ${questionNumber}:</label>
          <input type="text" id="correctAnswer${i}" required>
        `
      }
      answerInputs.appendChild(answerGroup)
    }
  }

  // Add event listeners only if elements exist
  if (numQuestionsInput) {
    numQuestionsInput.addEventListener("change", updateAnswerInputs)
  }

  if (questionTypeSelect) {
    questionTypeSelect.addEventListener("change", updateAnswerInputs)
  }

  // Initialize answer inputs
  updateAnswerInputs()

  // Update save questions button handler
  if (saveQuestionsBtn) {
    saveQuestionsBtn.addEventListener("click", async () => {
      try {
        // Get current form data
        const questionType = questionTypeSelect?.value
        const instructions = container.querySelector("#instructions")?.value?.trim()
        const imageFile = imageFileInput?.files[0]
        const existingImage = container.querySelector("img")
        const numQuestions = Number.parseInt(numQuestionsInput?.value || "0", 10)

        console.log("Saving form data:", {
          questionType,
          instructions,
          hasImage: !!(imageFile || existingImage?.src),
          numQuestions,
        })

        // Validate basic fields
        if (!questionType || !instructions || (!imageFile && !existingImage?.src)) {
          const missing = []
          if (!questionType) missing.push("Loại câu hỏi")
          if (!instructions) missing.push("Hướng dẫn")
          if (!imageFile && !existingImage?.src) missing.push("Hình ảnh")

          showNotification(`Vui lòng điền đầy đủ: ${missing.join(", ")}`, "error")
          return
        }

        // Get answers and correct answers
        const answers = []
        const correctAnswers = []
        let hasErrors = false

        for (let i = 0; i < numQuestions; i++) {
          // Get answer text if not technical type
          let answer = ""
          if (questionType !== "technical") {
            const answerInput = container.querySelector(`#answer${i}`)
            answer = answerInput?.value?.trim() || ""
            if (!answer) {
              console.log(`Missing answer for question ${i + 1}`)
              hasErrors = true
            }
          }
          answers.push(answer)

          // Get correct answer
          const correctAnswerInput = container.querySelector(`#correctAnswer${i}`)
          const correctAnswer = correctAnswerInput?.value?.trim() || ""
          if (!correctAnswer) {
            console.log(`Missing correct answer for question ${i + 1}`)
            hasErrors = true
          }
          correctAnswers.push(correctAnswer)
        }

        console.log("Collected answers:", {
          answers,
          correctAnswers,
          hasErrors,
        })

        if (hasErrors) {
          showNotification("Vui lòng điền đầy đủ câu trả lời và đáp án đúng", "error")
          return
        }

        // Create question object
        const newQuestion = {
          type: "Plan/Map/Diagram labelling",
          content: [questionType, instructions],
          correctAnswers,
        }

        // Add image to content
        if (imageFile) {
          const imageDataUrl = await new Promise((resolve) => {
            const reader = new FileReader()
            reader.onload = (e) => resolve(e.target.result)
            reader.readAsDataURL(imageFile)
          })
          newQuestion.content.push(imageDataUrl)
        } else if (existingImage) {
          newQuestion.content.push(existingImage.src)
        }

        // Add answers to content
        newQuestion.content.push(...answers)

        // Add to questions array
        questions.push({
          questionType,
          instructions,
          imageDataUrl: newQuestion.content[2],
          answers,
          correctAnswers,
          startQuestionNumber,
        })

        // Add to test object
        const part = Math.ceil(startQuestionNumber / 10)
        if (part >= 1 && part <= 4) {
          if (!test[`part${part}`]) {
            test[`part${part}`] = []
          }
          test[`part${part}`].push(newQuestion)
        }

        console.log("Saved question:", newQuestion)
        console.log("Updated test object:", test)

        // Update display and reset form
        if (questionForm) {
          questionForm.reset()
        }
        updateAnswerInputs()
        showNotification("Câu hỏi đã được lưu thành công!", "success")
      } catch (error) {
        console.error("Error saving questions:", error)
        showNotification(`Có lỗi xảy ra: ${error.message}`, "error")
      }
    })
  }

  function showNotification(message, type = "info") {
    if (!notification) return

    notification.textContent = message
    notification.className = `t1-notification t1-notification-${type}`
    notification.style.display = "block"

    // Add styles
    notification.style.padding = "10px"
    notification.style.margin = "10px 0"
    notification.style.borderRadius = "4px"

    if (type === "error") {
      notification.style.backgroundColor = "#fee2e2"
      notification.style.color = "#dc2626"
      notification.style.border = "1px solid #dc2626"
    } else if (type === "success") {
      notification.style.backgroundColor = "#dcfce7"
      notification.style.color = "#16a34a"
      notification.style.border = "1px solid #16a34a"
    }

    // Auto hide after 5 seconds
    setTimeout(() => {
      notification.style.display = "none"
    }, 5000)
  }
}

// Update the initialization of Note Completion form
function initializeNoteCompletionForm(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const form = container.querySelector("#t2ListeningExerciseForm")
  const questionContainer = container.querySelector("#t2ListeningExerciseQuestionContainer")
  const questionCountInput = container.querySelector("#t2ListeningExerciseQuestionCount")
  const updatePreviewBtn = container.querySelector('button[onclick="updateT2ListeningExercisePreview()"]')
  const saveExerciseBtn = container.querySelector('button[onclick="saveT2ListeningExercise()"]')

  if (!form || !questionContainer || !questionCountInput) {
    console.error("Required elements not found")
    return
  }

  function generateQuestionFields() {
    const count = Number.parseInt(questionCountInput.value, 10)
    questionContainer.innerHTML = ""

    for (let i = 1; i <= count; i++) {
      const questionGroup = document.createElement("div")
      questionGroup.className = "t2-listening-exercise-form-group"
      questionGroup.innerHTML = `
        <label for="t2ListeningExerciseQuestion${i}">Question ${i}:</label>
        <div class="t2-listening-exercise-answer-fields">
          <textarea 
            id="t2ListeningExerciseQuestion${i}" 
            name="question${i}" 
            placeholder="Question text (use [ANSWER] to mark answer position)"
            onchange="updateT2ListeningExerciseCorrectAnswerFields(${i})"
          ></textarea>
        </div>
        <div class="t2-listening-exercise-correct-answers" id="t2ListeningExerciseCorrectAnswers${i}">
          <span class="t2-listening-exercise-correct-answer-label">Correct Answers:</span>
        </div>
      `
      questionContainer.appendChild(questionGroup)
    }
  }

  // Update event listeners
  if (updatePreviewBtn) {
    updatePreviewBtn.addEventListener("click", updateT2ListeningExercisePreview)
  }

  if (saveExerciseBtn) {
    saveExerciseBtn.addEventListener("click", saveT2ListeningExercise)
  }

  questionCountInput.addEventListener("change", () => {
    generateQuestionFields()
    updateT2ListeningExercisePreview()
  })

  // Initialize with default fields
  generateQuestionFields()
  updateT2ListeningExercisePreview()
}

function createFormTableCompletionForm() {
  return `
    <div class="t6-ielts-listening-creator">
      <div id="tableSection" class="t6-question-container">
        <div class="t6-form-group">
          <label for="tableInstruction">Instructions:</label>
          <textarea id="tableInstruction" rows="2">Complete the table. Write NO MORE THAN ONE WORD AND/OR A NUMBER for each gap.</textarea>
        </div>
        <div class="t6-table-container">
          <button type="button" class="t6-add-row-btn">Add Row</button>
          <table id="fareTable">
            <tr>
              <th>Transport</th>
              <th>Cash Fare</th>
              <th>Card Fare</th>
              <th>Correct Answer</th>
              <th>Actions</th>
            </tr>
          </table>
        </div>
        <div class="t6-button-group">
          <button type="button" class="t6-save-btn">Save Table</button>
        </div>
        <div id="t6-notification" class="t6-notification" style="display: none;"></div>
      </div>
    </div>
  `
}

function initializeFormTableCompletionForm(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const addRowBtn = container.querySelector(".t6-add-row-btn")
  const saveBtn = container.querySelector(".t6-save-btn")
  const fareTable = container.querySelector("#fareTable")
  const notification = container.querySelector("#t6-notification")

  if (!addRowBtn || !saveBtn || !fareTable) {
    console.error("Required elements not found")
    return
  }

  // Add row button handler
  addRowBtn.addEventListener("click", () => {
    const newRow = fareTable.insertRow()
    newRow.innerHTML = `
      <td><input type="text" class="t6-transport-input" placeholder="Enter transport"></td>
      <td><input type="text" class="t6-cash-fare-input" placeholder="Enter cash fare"></td>
      <td><input type="text" class="t6-card-fare-input" placeholder="Enter card fare"></td>
      <td><input type="text" class="t6-correct-answer-input" placeholder="Enter correct answer"></td>
      <td><button type="button" class="t6-delete-btn">Delete</button></td>
    `
    setupDeleteButtons(container)
  })

  // Save button handler
  saveBtn.addEventListener("click", () => {
    try {
      // Get instruction
      const instruction = container.querySelector("#tableInstruction")?.value?.trim()
      if (!instruction) {
        showT6Notification("Please enter instructions", "error", notification)
        return
      }

      // Get table rows (skip header row)
      const rows = Array.from(fareTable.querySelectorAll("tr")).slice(1)
      if (rows.length === 0) {
        showT6Notification("Please add at least one row to the table", "error", notification)
        return
      }

      // Collect row data and validate
      const tableData = []
      const correctAnswers = []
      let hasErrors = false

      rows.forEach((row, index) => {
        const transport = row.querySelector(".t6-transport-input")?.value?.trim()
        const cashFare = row.querySelector(".t6-cash-fare-input")?.value?.trim()
        const cardFare = row.querySelector(".t6-card-fare-input")?.value?.trim()
        const correctAnswer = row.querySelector(".t6-correct-answer-input")?.value?.trim()

        if (!transport || !cashFare || !cardFare) {
          showT6Notification(`Please fill in all fields for row ${index + 1}`, "error", notification)
          hasErrors = true
          return
        }

        if (!correctAnswer) {
          showT6Notification(`Please provide a correct answer for row ${index + 1}`, "error", notification)
          hasErrors = true
          return
        }

        tableData.push([transport, cashFare, cardFare])
        correctAnswers.push(correctAnswer)
      })

      if (hasErrors) {
        return
      }

      // Create question object
      const questionData = {
        type: "Form/Table Completion",
        content: [instruction, ...tableData],
        correctAnswers,
      }

      // Add to test object
      const part = Math.ceil(totalQuestions / 10) || 1
      if (part >= 1 && part <= 4) {
        if (!test[`part${part}`]) {
          test[`part${part}`] = []
        }
        test[`part${part}`].push(questionData)
        totalQuestions += correctAnswers.length
      }

      console.log("Saved Form/Table Completion question:", questionData)
      showT6Notification("Table saved successfully!", "success", notification)

      // Reset form
      container.querySelector("#tableInstruction").value =
        "Complete the table. Write NO MORE THAN ONE WORD AND/OR A NUMBER for each gap."
      while (fareTable.rows.length > 1) {
        fareTable.deleteRow(1)
      }
    } catch (error) {
      console.error("Error saving table:", error)
      showT6Notification(`Error saving table: ${error.message}`, "error", notification)
    }
  })

  // Initialize delete buttons
  setupDeleteButtons(container)
}

function showT6Notification(message, type, notificationElement) {
  if (!notificationElement) return

  notificationElement.textContent = message
  notificationElement.className = `t6-notification t6-notification-${type}`
  notificationElement.style.display = "block"

  // Add styles
  notificationElement.style.padding = "10px"
  notificationElement.style.margin = "10px 0"
  notificationElement.style.borderRadius = "4px"
  notificationElement.style.marginTop = "1rem"

  if (type === "error") {
    notificationElement.style.backgroundColor = "#fee2e2"
    notificationElement.style.color = "#dc2626"
    notificationElement.style.border = "1px solid #dc2626"
  } else if (type === "success") {
    notificationElement.style.backgroundColor = "#dcfce7"
    notificationElement.style.color = "#16a34a"
    notificationElement.style.border = "1px solid #16a34a"
  }

  // Auto hide after 5 seconds
  setTimeout(() => {
    notificationElement.style.display = "none"
  }, 5000)
}

function createFlowChartCompletionForm() {
  return `
    <div class="t7-ielts-flow-chart-creator">
      <form id="flowChartForm" class="flow-chart-form">
        <div class="form-group">
          <label for="flowChartTitle">Title:</label>
          <input type="text" id="flowChartTitle" name="title" required>
        </div>
        
        <div class="form-group">
          <label for="flowChartInstructions">Instructions:</label>
          <textarea id="flowChartInstructions" name="instructions" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartItems">Flow Chart Items (one per line, use ___ for gaps):</label>
          <textarea id="flowChartItems" name="flowItems" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartOptions">Options (one per line):</label>
          <textarea id="flowChartOptions" name="options" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartAnswers">Correct Answers (comma-separated):</label>
          <input type="text" id="flowChartAnswers" name="correctAnswers" required>
        </div>

        <div class="button-group">
          <button type="submit" class="save-btn">Save Question</button>
          <button type="button" class="preview-btn">Preview</button>
        </div>
      </form>
      <div id="flowChartPreview" class="preview-section"></div>
    </div>
  `
}

function initializeOneAnswerForm(container) {
  const form = container.querySelector(".t3-one-answer-form")
  const preview = container.querySelector("#t3-questionPreview")

  form.addEventListener("submit", (e) => {
    e.preventDefault()
    const questionText = form.querySelector("#t3-questionText").value
    const options = form
      .querySelector("#t3-options")
      .value.split("\n")
      .filter((option) => option.trim() !== "")
    const correctAnswer = form.querySelector("#t3-correctAnswer").value

    preview.innerHTML = `
      <h3>${questionText}</h3>
      ${options
        .map(
          (option, index) => `
        <div>
          <input type="radio" id="option${index}" name="answer" value="${option}">
          <label for="option${index}">${option}</label>
          ${option === correctAnswer ? ' <span class="t3-correct-answer">(Correct)</span>' : ""}
        </div>
      `,
        )
        .join("")}
    `
  })
}

function initializeMultipleAnswerForm(container) {
  const form = container.querySelector("#t4-questionForm")
  const previewArea = container.querySelector("#t4-previewArea")

  form.addEventListener("submit", (e) => {
    e.preventDefault()

    const questionText = form.querySelector("#t4-questionText").value
    const options = form
      .querySelector("#t4-options")
      .value.split("\n")
      .filter((option) => option.trim() !== "")
    const correctAnswers = form
      .querySelector("#t4-correctAnswers")
      .value.split(",")
      .map((num) => Number.parseInt(num.trim()))

    previewArea.innerHTML = `
            <div class="t4-preview">
                <h2>${questionText}</h2>
                ${options
                  .map(
                    (option, index) => `
                    <label>
                        <input type="checkbox">
                        ${option}
                        ${correctAnswers.includes(index + 1) ? '<span class="t4-correct-answer"> (Correct)</span>' : ""}
                    </label>
                `,
                  )
                  .join("")}
            </div>
        `
  })
}

function initializeMatchingForm(container) {
  const form = container.querySelector("#t3-questionForm")
  const questionsContainer = container.querySelector("#t3-questionsContainer")
  const previewArea = container.querySelector("#t3-questionsPreview")
  const saveButton = container.querySelector("#t3-saveButton")

  form.querySelector("#t3-numberOfQuestions").addEventListener("change", (e) => {
    const count = Number.parseInt(e.target.value)
    questionsContainer.innerHTML = ""
    for (let i = 0; i < count; i++) {
      questionsContainer.innerHTML += createQuestionFields(i)
    }
  })

  form.addEventListener("submit", (e) => {
    e.preventDefault()
    updateMatchingPreview(container)
  })

  saveButton.addEventListener("click", () => {
    saveMatchingQuestions(container)
  })

  // Initialize with one question
  questionsContainer.innerHTML = createQuestionFields(0)
}

function initializePlanMapDiagram(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const questionForm = container.querySelector("#questionForm")
  if (!questionForm) {
    console.error("Question form not found")
    return
  }

  const questionDisplay = container.querySelector("#questionDisplay")
  const answerInputs = container.querySelector("#answerInputs")
  const numQuestionsInput = container.querySelector("#numQuestions")
  const questionTypeSelect = container.querySelector("#questionType")
  const imageFileInput = container.querySelector("#imageFile")
  const saveQuestionsBtn = container.querySelector("#saveQuestionsBtn")
  const notification = container.querySelector("#notification")
  const questions = []
  const startQuestionNumber = 1

  // Log elements for debugging
  console.log("Form elements:", {
    questionForm,
    questionDisplay,
    answerInputs,
    numQuestionsInput,
    questionTypeSelect,
    imageFileInput,
    saveQuestionsBtn,
    notification,
  })

  function updateAnswerInputs() {
    if (!answerInputs || !numQuestionsInput || !questionTypeSelect) {
      console.error("Required elements not found")
      return
    }

    const numQuestions = Number.parseInt(numQuestionsInput.value, 10)
    const questionType = questionTypeSelect.value
    answerInputs.innerHTML = ""

    for (let i = 0; i < numQuestions; i++) {
      const answerGroup = document.createElement("div")
      answerGroup.className = "t1-form-group"
      const questionNumber = startQuestionNumber + i

      if (questionType === "technical") {
        answerGroup.innerHTML = `
          <label for="correctAnswer${i}">Câu trả lời đúng cho câu ${questionNumber}:</label>
          <input type="text" id="correctAnswer${i}" required>
        `
      } else {
        answerGroup.innerHTML = `
          <label for="answer${i}">Câu trả lời ${questionNumber}:</label>
          <input type="text" id="answer${i}" required>
          <label for="correctAnswer${i}">Câu trả lời đúng cho câu ${questionNumber}:</label>
          <input type="text" id="correctAnswer${i}" required>
        `
      }
      answerInputs.appendChild(answerGroup)
    }
  }

  // Add event listeners only if elements exist
  if (numQuestionsInput) {
    numQuestionsInput.addEventListener("change", updateAnswerInputs)
  }

  if (questionTypeSelect) {
    questionTypeSelect.addEventListener("change", updateAnswerInputs)
  }

  // Initialize answer inputs
  updateAnswerInputs()

  // Update save questions button handler
  if (saveQuestionsBtn) {
    saveQuestionsBtn.addEventListener("click", async () => {
      try {
        // Get current form data
        const questionType = questionTypeSelect?.value
        const instructions = container.querySelector("#instructions")?.value?.trim()
        const imageFile = imageFileInput?.files[0]
        const existingImage = container.querySelector("img")
        const numQuestions = Number.parseInt(numQuestionsInput?.value || "0", 10)

        console.log("Saving form data:", {
          questionType,
          instructions,
          hasImage: !!(imageFile || existingImage?.src),
          numQuestions,
        })

        // Validate basic fields
        if (!questionType || !instructions || (!imageFile && !existingImage?.src)) {
          const missing = []
          if (!questionType) missing.push("Loại câu hỏi")
          if (!instructions) missing.push("Hướng dẫn")
          if (!imageFile && !existingImage?.src) missing.push("Hình ảnh")

          showNotification(`Vui lòng điền đầy đủ: ${missing.join(", ")}`, "error")
          return
        }

        // Get answers and correct answers
        const answers = []
        const correctAnswers = []
        let hasErrors = false

        for (let i = 0; i < numQuestions; i++) {
          // Get answer text if not technical type
          let answer = ""
          if (questionType !== "technical") {
            const answerInput = container.querySelector(`#answer${i}`)
            answer = answerInput?.value?.trim() || ""
            if (!answer) {
              console.log(`Missing answer for question ${i + 1}`)
              hasErrors = true
            }
          }
          answers.push(answer)

          // Get correct answer
          const correctAnswerInput = container.querySelector(`#correctAnswer${i}`)
          const correctAnswer = correctAnswerInput?.value?.trim() || ""
          if (!correctAnswer) {
            console.log(`Missing correct answer for question ${i + 1}`)
            hasErrors = true
          }
          correctAnswers.push(correctAnswer)
        }

        console.log("Collected answers:", {
          answers,
          correctAnswers,
          hasErrors,
        })

        if (hasErrors) {
          showNotification("Vui lòng điền đầy đủ câu trả lời và đáp án đúng", "error")
          return
        }

        // Create question object
        const newQuestion = {
          type: "Plan/Map/Diagram labelling",
          content: [questionType, instructions],
          correctAnswers,
        }

        // Add image to content
        if (imageFile) {
          const imageDataUrl = await new Promise((resolve) => {
            const reader = new FileReader()
            reader.onload = (e) => resolve(e.target.result)
            reader.readAsDataURL(imageFile)
          })
          newQuestion.content.push(imageDataUrl)
        } else if (existingImage) {
          newQuestion.content.push(existingImage.src)
        }

        // Add answers to content
        newQuestion.content.push(...answers)

        // Add to questions array
        questions.push({
          questionType,
          instructions,
          imageDataUrl: newQuestion.content[2],
          answers,
          correctAnswers,
          startQuestionNumber,
        })

        // Add to test object
        const part = Math.ceil(startQuestionNumber / 10)
        if (part >= 1 && part <= 4) {
          if (!test[`part${part}`]) {
            test[`part${part}`] = []
          }
          test[`part${part}`].push(newQuestion)
        }

        console.log("Saved question:", newQuestion)
        console.log("Updated test object:", test)

        // Update display and reset form
        if (questionForm) {
          questionForm.reset()
        }
        updateAnswerInputs()
        showNotification("Câu hỏi đã được lưu thành công!", "success")
      } catch (error) {
        console.error("Error saving questions:", error)
        showNotification(`Có lỗi xảy ra: ${error.message}`, "error")
      }
    })
  }

  function showNotification(message, type = "info") {
    if (!notification) return

    notification.textContent = message
    notification.className = `t1-notification t1-notification-${type}`
    notification.style.display = "block"

    // Add styles
    notification.style.padding = "10px"
    notification.style.margin = "10px 0"
    notification.style.borderRadius = "4px"

    if (type === "error") {
      notification.style.backgroundColor = "#fee2e2"
      notification.style.color = "#dc2626"
      notification.style.border = "1px solid #dc2626"
    } else if (type === "success") {
      notification.style.backgroundColor = "#dcfce7"
      notification.style.color = "#16a34a"
      notification.style.border = "1px solid #16a34a"
    }

    // Auto hide after 5 seconds
    setTimeout(() => {
      notification.style.display = "none"
    }, 5000)
  }
}

// Update the initialization of Note Completion form
function initializeNoteCompletionForm(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const form = container.querySelector("#t2ListeningExerciseForm")
  const questionContainer = container.querySelector("#t2ListeningExerciseQuestionContainer")
  const questionCountInput = container.querySelector("#t2ListeningExerciseQuestionCount")
  const updatePreviewBtn = container.querySelector('button[onclick="updateT2ListeningExercisePreview()"]')
  const saveExerciseBtn = container.querySelector('button[onclick="saveT2ListeningExercise()"]')

  if (!form || !questionContainer || !questionCountInput) {
    console.error("Required elements not found")
    return
  }

  function generateQuestionFields() {
    const count = Number.parseInt(questionCountInput.value, 10)
    questionContainer.innerHTML = ""

    for (let i = 1; i <= count; i++) {
      const questionGroup = document.createElement("div")
      questionGroup.className = "t2-listening-exercise-form-group"
      questionGroup.innerHTML = `
        <label for="t2ListeningExerciseQuestion${i}">Question ${i}:</label>
        <div class="t2-listening-exercise-answer-fields">
          <textarea 
            id="t2ListeningExerciseQuestion${i}" 
            name="question${i}" 
            placeholder="Question text (use [ANSWER] to mark answer position)"
            onchange="updateT2ListeningExerciseCorrectAnswerFields(${i})"
          ></textarea>
        </div>
        <div class="t2-listening-exercise-correct-answers" id="t2ListeningExerciseCorrectAnswers${i}">
          <span class="t2-listening-exercise-correct-answer-label">Correct Answers:</span>
        </div>
      `
      questionContainer.appendChild(questionGroup)
    }
  }

  // Update event listeners
  if (updatePreviewBtn) {
    updatePreviewBtn.addEventListener("click", updateT2ListeningExercisePreview)
  }

  if (saveExerciseBtn) {
    saveExerciseBtn.addEventListener("click", saveT2ListeningExercise)
  }

  questionCountInput.addEventListener("change", () => {
    generateQuestionFields()
    updateT2ListeningExercisePreview()
  })

  // Initialize with default fields
  generateQuestionFields()
  updateT2ListeningExercisePreview()
}

function createFormTableCompletionForm() {
  return `
    <div class="t6-ielts-listening-creator">
      <div id="tableSection" class="t6-question-container">
        <div class="t6-form-group">
          <label for="tableInstruction">Instructions:</label>
          <textarea id="tableInstruction" rows="2">Complete the table. Write NO MORE THAN ONE WORD AND/OR A NUMBER for each gap.</textarea>
        </div>
        <div class="t6-table-container">
          <button type="button" class="t6-add-row-btn">Add Row</button>
          <table id="fareTable">
            <tr>
              <th>Transport</th>
              <th>Cash Fare</th>
              <th>Card Fare</th>
              <th>Correct Answer</th>
              <th>Actions</th>
            </tr>
          </table>
        </div>
        <div class="t6-button-group">
          <button type="button" class="t6-save-btn">Save Table</button>
        </div>
        <div id="t6-notification" class="t6-notification" style="display: none;"></div>
      </div>
    </div>
  `
}

function initializeFormTableCompletionForm(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const addRowBtn = container.querySelector(".t6-add-row-btn")
  const saveBtn = container.querySelector(".t6-save-btn")
  const fareTable = container.querySelector("#fareTable")
  const notification = container.querySelector("#t6-notification")

  if (!addRowBtn || !saveBtn || !fareTable) {
    console.error("Required elements not found")
    return
  }

  // Add row button handler
  addRowBtn.addEventListener("click", () => {
    const newRow = fareTable.insertRow()
    newRow.innerHTML = `
      <td><input type="text" class="t6-transport-input" placeholder="Enter transport"></td>
      <td><input type="text" class="t6-cash-fare-input" placeholder="Enter cash fare"></td>
      <td><input type="text" class="t6-card-fare-input" placeholder="Enter card fare"></td>
      <td><input type="text" class="t6-correct-answer-input" placeholder="Enter correct answer"></td>
      <td><button type="button" class="t6-delete-btn">Delete</button></td>
    `
    setupDeleteButtons(container)
  })

  // Save button handler
  saveBtn.addEventListener("click", () => {
    try {
      // Get instruction
      const instruction = container.querySelector("#tableInstruction")?.value?.trim()
      if (!instruction) {
        showT6Notification("Please enter instructions", "error", notification)
        return
      }

      // Get table rows (skip header row)
      const rows = Array.from(fareTable.querySelectorAll("tr")).slice(1)
      if (rows.length === 0) {
        showT6Notification("Please add at least one row to the table", "error", notification)
        return
      }

      // Collect row data and validate
      const tableData = []
      const correctAnswers = []
      let hasErrors = false

      rows.forEach((row, index) => {
        const transport = row.querySelector(".t6-transport-input")?.value?.trim()
        const cashFare = row.querySelector(".t6-cash-fare-input")?.value?.trim()
        const cardFare = row.querySelector(".t6-card-fare-input")?.value?.trim()
        const correctAnswer = row.querySelector(".t6-correct-answer-input")?.value?.trim()

        if (!transport || !cashFare || !cardFare) {
          showT6Notification(`Please fill in all fields for row ${index + 1}`, "error", notification)
          hasErrors = true
          return
        }

        if (!correctAnswer) {
          showT6Notification(`Please provide a correct answer for row ${index + 1}`, "error", notification)
          hasErrors = true
          return
        }

        tableData.push([transport, cashFare, cardFare])
        correctAnswers.push(correctAnswer)
      })

      if (hasErrors) {
        return
      }

      // Create question object
      const questionData = {
        type: "Form/Table Completion",
        content: [instruction, ...tableData],
        correctAnswers,
      }

      // Add to test object
      const part = Math.ceil(totalQuestions / 10) || 1
      if (part >= 1 && part <= 4) {
        if (!test[`part${part}`]) {
          test[`part${part}`] = []
        }
        test[`part${part}`].push(questionData)
        totalQuestions += correctAnswers.length
      }

      console.log("Saved Form/Table Completion question:", questionData)
      showT6Notification("Table saved successfully!", "success", notification)

      // Reset form
      container.querySelector("#tableInstruction").value =
        "Complete the table. Write NO MORE THAN ONE WORD AND/OR A NUMBER for each gap."
      while (fareTable.rows.length > 1) {
        fareTable.deleteRow(1)
      }
    } catch (error) {
      console.error("Error saving table:", error)
      showT6Notification(`Error saving table: ${error.message}`, "error", notification)
    }
  })

  // Initialize delete buttons
  setupDeleteButtons(container)
}

function showT6Notification(message, type, notificationElement) {
  if (!notificationElement) return

  notificationElement.textContent = message
  notificationElement.className = `t6-notification t6-notification-${type}`
  notificationElement.style.display = "block"

  // Add styles
  notificationElement.style.padding = "10px"
  notificationElement.style.margin = "10px 0"
  notificationElement.style.borderRadius = "4px"
  notificationElement.style.marginTop = "1rem"

  if (type === "error") {
    notificationElement.style.backgroundColor = "#fee2e2"
    notificationElement.style.color = "#dc2626"
    notificationElement.style.border = "1px solid #dc2626"
  } else if (type === "success") {
    notificationElement.style.backgroundColor = "#dcfce7"
    notificationElement.style.color = "#16a34a"
    notificationElement.style.border = "1px solid #16a34a"
  }

  // Auto hide after 5 seconds
  setTimeout(() => {
    notificationElement.style.display = "none"
  }, 5000)
}

function createFlowChartCompletionForm() {
  return `
    <div class="t7-ielts-flow-chart-creator">
      <form id="flowChartForm" class="flow-chart-form">
        <div class="form-group">
          <label for="flowChartTitle">Title:</label>
          <input type="text" id="flowChartTitle" name="title" required>
        </div>
        
        <div class="form-group">
          <label for="flowChartInstructions">Instructions:</label>
          <textarea id="flowChartInstructions" name="instructions" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartItems">Flow Chart Items (one per line, use ___ for gaps):</label>
          <textarea id="flowChartItems" name="flowItems" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartOptions">Options (one per line):</label>
          <textarea id="flowChartOptions" name="options" required></textarea>
        </div>

        <div class="form-group">
          <label for="flowChartAnswers">Correct Answers (comma-separated):</label>
          <input type="text" id="flowChartAnswers" name="correctAnswers" required>
        </div>

        <div class="button-group">
          <button type="submit" class="save-btn">Save Question</button>
          <button type="button" class="preview-btn">Preview</button>
        </div>
      </form>
      <div id="flowChartPreview" class="preview-section"></div>
    </div>
  `
}

function initializeOneAnswerForm(container) {
  const form = container.querySelector(".t3-one-answer-form")
  const preview = container.querySelector("#t3-questionPreview")

  form.addEventListener("submit", (e) => {
    e.preventDefault()
    const questionText = form.querySelector("#t3-questionText").value
    const options = form
      .querySelector("#t3-options")
      .value.split("\n")
      .filter((option) => option.trim() !== "")
    const correctAnswer = form.querySelector("#t3-correctAnswer").value

    preview.innerHTML = `
      <h3>${questionText}</h3>
      ${options
        .map(
          (option, index) => `
        <div>
          <input type="radio" id="option${index}" name="answer" value="${option}">
          <label for="option${index}">${option}</label>
          ${option === correctAnswer ? ' <span class="t3-correct-answer">(Correct)</span>' : ""}
        </div>
      `,
        )
        .join("")}
    `
  })
}

function initializeMultipleAnswerForm(container) {
  const form = container.querySelector("#t4-questionForm")
  const previewArea = container.querySelector("#t4-previewArea")

  form.addEventListener("submit", (e) => {
    e.preventDefault()

    const questionText = form.querySelector("#t4-questionText").value
    const options = form
      .querySelector("#t4-options")
      .value.split("\n")
      .filter((option) => option.trim() !== "")
    const correctAnswers = form
      .querySelector("#t4-correctAnswers")
      .value.split(",")
      .map((num) => Number.parseInt(num.trim()))

    previewArea.innerHTML = `
            <div class="t4-preview">
                <h2>${questionText}</h2>
                ${options
                  .map(
                    (option, index) => `
                    <label>
                        <input type="checkbox">
                        ${option}
                        ${correctAnswers.includes(index + 1) ? '<span class="t4-correct-answer"> (Correct)</span>' : ""}
                    </label>
                `,
                  )
                  .join("")}
            </div>
        `
  })
}

function initializeMatchingForm(container) {
  const form = container.querySelector("#t3-questionForm")
  const questionsContainer = container.querySelector("#t3-questionsContainer")
  const previewArea = container.querySelector("#t3-questionsPreview")
  const saveButton = container.querySelector("#t3-saveButton")

  form.querySelector("#t3-numberOfQuestions").addEventListener("change", (e) => {
    const count = Number.parseInt(e.target.value)
    questionsContainer.innerHTML = ""
    for (let i = 0; i < count; i++) {
      questionsContainer.innerHTML += createQuestionFields(i)
    }
  })

  form.addEventListener("submit", (e) => {
    e.preventDefault()
    updateMatchingPreview(container)
  })

  saveButton.addEventListener("click", () => {
    saveMatchingQuestions(container)
  })

  // Initialize with one question
  questionsContainer.innerHTML = createQuestionFields(0)
}

function initializePlanMapDiagram(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const questionForm = container.querySelector("#questionForm")
  if (!questionForm) {
    console.error("Question form not found")
    return
  }

  const questionDisplay = container.querySelector("#questionDisplay")
  const answerInputs = container.querySelector("#answerInputs")
  const numQuestionsInput = container.querySelector("#numQuestions")
  const questionTypeSelect = container.querySelector("#questionType")
  const imageFileInput = container.querySelector("#imageFile")
  const saveQuestionsBtn = container.querySelector("#saveQuestionsBtn")
  const notification = container.querySelector("#notification")
  const questions = []
  const startQuestionNumber = 1

  // Log elements for debugging
  console.log("Form elements:", {
    questionForm,
    questionDisplay,
    answerInputs,
    numQuestionsInput,
    questionTypeSelect,
    imageFileInput,
    saveQuestionsBtn,
    notification,
  })

  function updateAnswerInputs() {
    if (!answerInputs || !numQuestionsInput || !questionTypeSelect) {
      console.error("Required elements not found")
      return
    }

    const numQuestions = Number.parseInt(numQuestionsInput.value, 10)
    const questionType = questionTypeSelect.value
    answerInputs.innerHTML = ""

    for (let i = 0; i < numQuestions; i++) {
      const answerGroup = document.createElement("div")
      answerGroup.className = "t1-form-group"
      const questionNumber = startQuestionNumber + i

      if (questionType === "technical") {
        answerGroup.innerHTML = `
          <label for="correctAnswer${i}">Câu trả lời đúng cho câu ${questionNumber}:</label>
          <input type="text" id="correctAnswer${i}" required>
        `
      } else {
        answerGroup.innerHTML = `
          <label for="answer${i}">Câu trả lời ${questionNumber}:</label>
          <input type="text" id="answer${i}" required>
          <label for="correctAnswer${i}">Câu trả lời đúng cho câu ${questionNumber}:</label>
          <input type="text" id="correctAnswer${i}" required>
        `
      }
      answerInputs.appendChild(answerGroup)
    }
  }

  // Add event listeners only if elements exist
  if (numQuestionsInput) {
    numQuestionsInput.addEventListener("change", updateAnswerInputs)
  }

  if (questionTypeSelect) {
    questionTypeSelect.addEventListener("change", updateAnswerInputs)
  }

  // Initialize answer inputs
  updateAnswerInputs()

  // Update save questions button handler
  if (saveQuestionsBtn) {
    saveQuestionsBtn.addEventListener("click", async () => {
      try {
        // Get current form data
        const questionType = questionTypeSelect?.value
        const instructions = container.querySelector("#instructions")?.value?.trim()
        const imageFile = imageFileInput?.files[0]
        const existingImage = container.querySelector("img")
        const numQuestions = Number.parseInt(numQuestionsInput?.value || "0", 10)

        console.log("Saving form data:", {
          questionType,
          instructions,
          hasImage: !!(imageFile || existingImage?.src),
          numQuestions,
        })

        // Validate basic fields
        if (!questionType || !instructions || (!imageFile && !existingImage?.src)) {
          const missing = []
          if (!questionType) missing.push("Loại câu hỏi")
          if (!instructions) missing.push("Hướng dẫn")
          if (!imageFile && !existingImage?.src) missing.push("Hình ảnh")

          showNotification(`Vui lòng điền đầy đủ: ${missing.join(", ")}`, "error")
          return
        }

        // Get answers and correct answers
        const answers = []
        const correctAnswers = []
        let hasErrors = false

        for (let i = 0; i < numQuestions; i++) {
          // Get answer text if not technical type
          let answer = ""
          if (questionType !== "technical") {
            const answerInput = container.querySelector(`#answer${i}`)
            answer = answerInput?.value?.trim() || ""
            if (!answer) {
              console.log(`Missing answer for question ${i + 1}`)
              hasErrors = true
            }
          }
          answers.push(answer)

          // Get correct answer
          const correctAnswerInput = container.querySelector(`#correctAnswer${i}`)
          const correctAnswer = correctAnswerInput?.value?.trim() || ""
          if (!correctAnswer) {
            console.log(`Missing correct answer for question ${i + 1}`)
            hasErrors = true
          }
          correctAnswers.push(correctAnswer)
        }

        console.log("Collected answers:", {
          answers,
          correctAnswers,
          hasErrors,
        })

        if (hasErrors) {
          showNotification("Vui lòng điền đầy đủ câu trả lời và đáp án đúng", "error")
          return
        }

        // Create question object
        const newQuestion = {
          type: "Plan/Map/Diagram labelling",
          content: [questionType, instructions],
          correctAnswers,
        }

        // Add image to content
        if (imageFile) {
          const imageDataUrl = await new Promise((resolve) => {
            const reader = new FileReader()
            reader.onload = (e) => resolve(e.target.result)
            reader.readAsDataURL(imageFile)
          })
          newQuestion.content.push(imageDataUrl)
        } else if (existingImage) {
          newQuestion.content.push(existingImage.src)
        }

        // Add answers to content
        newQuestion.content.push(...answers)

        // Add to questions array
        questions.push({
          questionType,
          instructions,
          imageDataUrl: newQuestion.content[2],
          answers,
          correctAnswers,
          startQuestionNumber,
        })

        // Add to test object
        const part = Math.ceil(startQuestionNumber / 10)
        if (part >= 1 && part <= 4) {
          if (!test[`part${part}`]) {
            test[`part${part}`] = []
          }
          test[`part${part}`].push(newQuestion)
        }

        console.log("Saved question:", newQuestion)
        console.log("Updated test object:", test)

        // Update display and reset form
        if (questionForm) {
          questionForm.reset()
        }
        updateAnswerInputs()
        showNotification("Câu hỏi đã được lưu thành công!", "success")
      } catch (error) {
        console.error("Error saving questions:", error)
        showNotification(`Có lỗi xảy ra: ${error.message}`, "error")
      }
    })
  }

  function showNotification(message, type = "info") {
    if (!notification) return

    notification.textContent = message
    notification.className = `t1-notification t1-notification-${type}`
    notification.style.display = "block"

    // Add styles
    notification.style.padding = "10px"
    notification.style.margin = "10px 0"
    notification.style.borderRadius = "4px"

    if (type === "error") {
      notification.style.backgroundColor = "#fee2e2"
      notification.style.color = "#dc2626"
      notification.style.border = "1px solid #dc2626"
    } else if (type === "success") {
      notification.style.backgroundColor = "#dcfce7"
      notification.style.color = "#16a34a"
      notification.style.border = "1px solid #16a34a"
    }

    // Auto hide after 5 seconds
    setTimeout(() => {
      notification.style.display = "none"
    }, 5000)
  }
}

// Update the initialization of Note Completion form
function initializeNoteCompletionForm(container) {
  if (!container) {
    console.error("Container not found")
    return
  }

  const form = container.querySelector("#t2ListeningExerciseForm")
  const questionContainer = container.querySelector("#t2ListeningExerciseQuestionContainer")
  const questionCountInput = container.querySelector("#t2ListeningExerciseQuestionCount")
  const updatePreviewBtn = container.querySelector('button[onclick="updateT2ListeningExercisePreview()"]')
  const saveExerciseBtn = container.querySelector('button[onclick="saveT2ListeningExercise()"]')

  if (!form || !questionContainer || !questionCountInput) {
    console.error("Required elements not found")
    return
  }

  function generateQuestionFields() {
    const count = Number.parseInt(questionCountInput.value, 10)
    questionContainer.innerHTML = ""

    for (let i = 1; i <= count; i++) {
      const questionGroup = document.createElement("div")
      questionGroup.className = "t2-listening-exercise-form-group"
      questionGroup.innerHTML = `
        <label for="t2ListeningExerciseQuestion${i}">Question ${i}:</label>
        <div class="t2-listening-exercise-answer-fields">
          <textarea 
            id="t2ListeningExerciseQuestion${i}" 
            name="question${i}" 
            placeholder="Question text (use [ANSWER] to mark answer position)"
            onchange="updateT2ListeningExerciseCorrectAnswerFields(${i})"
          ></textarea>
        </div>
        <div class="t2-listening-exercise-correct-answers" id="t2ListeningExerciseCorrectAnswers${i}">
          <span class="t2-listening-exercise-correct-answer-label">Correct Answers:</span>
        </div>
      `
      questionContainer.appendChild(questionGroup)
    }
  }

  // Update event listeners
  if (updatePreviewBtn) {
    updatePreviewBtn.addEventListener("click", updateT2ListeningExercisePreview)
  }

  if (saveExerciseBtn) {
    saveExerciseBtn.addEventListener("click", saveT2ListeningExercise)
  }

  questionCountInput.addEventListener("change", () => {
    generateQuestionFields()
    updateT2ListeningExercisePreview()
  })

  // Initialize with default fields
  generateQuestionFields()
  updateT2ListeningExercisePreview()
}

function initializeFlowChartCompletionForm(container) {
  if (!container) return

  const form = container.querySelector(".flow-chart-form")
  const preview = container.querySelector("#flowChartPreview")

  if (!form || !preview) return

  form.addEventListener("submit", (e) => {
    e.preventDefault()

    try {
      const formData = {
        title: form.querySelector("#flowChartTitle").value,
        instructions: form.querySelector("#flowChartInstructions").value,
        flowItems: form
          .querySelector("#flowChartItems")
          .value.split("\n")
          .filter((item) => item.trim()),
        options: form
          .querySelector("#flowChartOptions")
          .value.split("\n")
          .filter((item) => item.trim()),
        correctAnswers: form
          .querySelector("#flowChartAnswers")
          .value.split(",")
          .map((item) => item.trim()),
      }

      // Save to test object
      const questionData = {
        type: "Flow chart Completion",
        content: [formData.title, formData.instructions, ...formData.flowItems, ...formData.options],
        correctAnswers: formData.correctAnswers,
      }

      // Update preview
      updateFlowChartPreview(formData, preview)

      // Show success message
      if (typeof showMessage === "function") {
        showMessage("Flow chart question saved successfully!", "success")
      }

      return questionData
    } catch (error) {
      console.error("Error saving flow chart question:", error)
      if (typeof showMessage === "function") {
        showMessage("Error saving flow chart question. Please check the form.", "error")
      }
    }
  })

  // Initialize preview button
  const previewBtn = form.querySelector(".preview-btn")
  if (previewBtn) {
    previewBtn.addEventListener("click", () => {
      const formData = {
        title: form.querySelector("#flowChartTitle").value,
        instructions: form.querySelector("#flowChartInstructions").value,
        flowItems: form
          .querySelector("#flowChartItems")
          .value.split("\n")
          .filter((item) => item.trim()),
        options: form
          .querySelector("#flowChartOptions")
          .value.split("\n")
          .filter((item) => item.trim()),
        correctAnswers: form
          .querySelector("#flowChartAnswers")
          .value.split(",")
          .map((item) => item.trim()),
      }
      updateFlowChartPreview(formData, preview)
    })
  }
}

function createQuestionFields(index) {
  return `
        <div class="t3-question-fields" data-question="${index}">
            <h3>Question ${index + 1}</h3>
            <div class="t3-form-group">
                <label for="t3-questionTitle${index}">Question Title:</label>
                <input type="text" id="t3-questionTitle${index}" name="questionTitle${index}" required>
            </div>
            <div class="t3-form-group">
                <label for="t3-people${index}">People (one per line):</label>
                <textarea id="t3-people${index}" name="people${index}" required></textarea>
            </div>
            <div class="t3-form-group">
                <label for="t3-responsibilities${index}">Responsibilities (one per line):</label>
                <textarea id="t3-responsibilities${index}" name="responsibilities${index}" required></textarea>
            </div>
            <div class="t3-form-group">
                <label for="t3-correctAnswers${index}">Correct Answers (one per line, in order of people):</label>
                <textarea id="t3-correctAnswers${index}" name="correctAnswers${index}" required></textarea>
            </div>
        </div>
    `
}

function updateMatchingPreview(container) {
  const count = Number.parseInt(container.querySelector("#t3-numberOfQuestions").value)
  let previewHTML = ""

  for (let i = 0; i < count; i++) {
    const title = container.querySelector(`#t3-questionTitle${i}`).value
    const people = container
      .querySelector(`#t3-people${i}`)
      .value.split("\n")
      .filter((p) => p.trim() !== "")
    const responsibilities = container
      .querySelector(`#t3-responsibilities${i}`)
      .value.split("\n")
      .filter((r) => r.trim() !== "")
    const correctAnswers = container
      .querySelector(`#t3-correctAnswers${i}`)
      .value.split("\n")
      .filter((a) => a.trim() !== "")

    previewHTML += `
            <div class="t3-question-preview">
                <h3>Question ${i + 1}</h3>
                <div class="t3-question-title">${title}</div>
                <div class="t3-matching-section">
                    <div>
                        <div class="t3-column-header">People</div>
                        <div class="t3-matching-content">
                            ${people
                              .map(
                                (person, index) => `
                                <div class="t3-person-row">
                                    <div class="t3-person-name">${person}</div>
                                    <div class="t3-answer-box" ondrop="t3Drop(event)" ondragover="t3AllowDrop(event)"></div>
                                    <div class="t3-correct-answer">(${correctAnswers[index] || ""})</div>
                                </div>
                            `,
                              )
                              .join("")}
                        </div>
                    </div>
                    <div>
                        <div class="t3-column-header">Staff Responsibilities</div>
                        <div class="t3-responsibilities-content">
                            ${responsibilities
                              .map(
                                (resp) => `
                                <div class="t3-responsibility" draggable="true" ondragstart="t3Drag(event)">${resp}</div>
                            `,
                              )
                              .join("")}
                        </div>
                    </div>
                </div>
            </div>
        `
  }

  container.querySelector("#t3-questionsPreview").innerHTML = previewHTML
}

function saveMatchingQuestions(container) {
  const questions = []
  const count = Number.parseInt(container.querySelector("#t3-numberOfQuestions").value)

  for (let i = 0; i < count; i++) {
    const title = container.querySelector(`#t3-questionTitle${i}`).value
    const people = container
      .querySelector(`#t3-people${i}`)
      .value.split("\n")
      .filter((p) => p.trim() !== "")
    const responsibilities = container
      .querySelector(`#t3-responsibilities${i}`)
      .value.split("\n")
      .filter((r) => r.trim() !== "")
    const correctAnswers = container
      .querySelector(`#t3-correctAnswers${i}`)
      .value.split("\n")
      .filter((a) => a.trim() !== "")

    questions.push({
      title,
      people,
      responsibilities,
      correctAnswers,
    })
  }

  // Send data to backend (replace with actual API call)
  console.log("Saving matching questions:", questions)
  showMessage("Questions saved successfully!", "success")
}

function showMessage(message, type = "info") {
  // Try to find existing message element
  let messageElement = document.getElementById("message")

  // Create new message element if it doesn't exist
  if (!messageElement) {
    messageElement = document.createElement("div")
    messageElement.id = "message"
    document.body.appendChild(messageElement)
  }

  // Set message content and style
  messageElement.textContent = message
  messageElement.className = `message message-${type}`
  messageElement.style.display = "block"

  // Auto-hide after 5 seconds
  setTimeout(() => {
    if (messageElement) {
      messageElement.style.display = "none"
    }
  }, 5000)
}

function updateFlowChartPreview(data, previewElement) {
  if (!previewElement) return

  const previewHTML = `
    <div class="flow-chart-preview">
      <h3>${data.title}</h3>
      <p class="instructions">${data.instructions}</p>
      <div class="flow-items">
        ${data.flowItems
          .map(
            (item) => `
          <div class="flow-item">
            ${item.replace("___", '<div class="gap" data-droppable="true"></div>')}
          </div>
        `,
          )
          .join("")}
      </div>
      <div class="options">
        ${data.options
          .map(
            (option) => `
          <div class="option" draggable="true">${option}</div>
        `,
          )
          .join("")}
      </div>
    </div>
  `

  previewElement.innerHTML = previewHTML
  initializeDragAndDrop(previewElement)
}

function initDragAndDrop(container) {
  const options = container.querySelectorAll(".t7-option")
  const gaps = container.querySelectorAll(".t7-gap")

  options.forEach((option) => {
    option.addEventListener("dragstart", dragStart)
    option.addEventListener("dragend", dragEnd)
  })

  gaps.forEach((gap) => {
    gap.addEventListener("dragover", dragOver)
    gap.addEventListener("dragenter", dragEnter)
    gap.addEventListener("dragleave", dragLeave)
    gap.addEventListener("drop", drop)
  })
}

function dragStart(e) {
  e.dataTransfer.setData("text/plain", e.target.innerText)
  e.target.classList.add("dragging")
}

function dragEnd(e) {
  e.target.classList.remove("dragging")
}

function dragOver(e) {
  e.preventDefault()
}

function dragEnter(e) {
  e.preventDefault()
  e.target.classList.add("drag-over")
}

function dragLeave(e) {
  e.target.classList.remove("drag-over")
}

function drop(e) {
  e.preventDefault()
  e.target.classList.remove("drag-over")
  const data = e.dataTransfer.getData("text/plain")
  e.target.textContent = data
}

function previewEntireTest() {
  const previewWindow = window.open("", "Preview", "width=800,height=600")
  let previewContent = "<h1>IELTS Listening Test Preview</h1>"

  for (let i = 1; i <= 4; i++) {
    previewContent += `<h2>Part ${i}</h2>`
    const part = document.getElementById(`part${i}`)
    const questions = part.querySelectorAll(".question")
    questions.forEach((question, index) => {
      previewContent += `<div class="preview-question">
                <h3>Question ${index + 1}</h3>
                ${question.innerHTML}
            </div>`
    })
  }

  previewWindow.document.body.innerHTML = previewContent
}

function exportTest() {
  const testData = JSON.stringify(test, null, 2)
  const blob = new Blob([testData], { type: "application/json" })
  const url = URL.createObjectURL(blob)
  const a = document.createElement("a")
  a.href = url
  a.download = "ielts_listening_test.json"
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

function importTest() {
  const input = document.createElement("input")
  input.type = "file"
  input.accept = "application/json"
  input.onchange = (e) => {
    const file = e.target.files[0]
    const reader = new FileReader()
    reader.onload = (event) => {
      try {
        const importedTest = JSON.parse(event.target.result)
        test = importedTest
        renderImportedTest()
      } catch (error) {
        console.error("Error parsing imported test:", error)
        alert("Error importing test. Please make sure the file is a valid JSON.")
      }
    }
    reader.readAsText(file)
  }
  input.click()
}

function renderImportedTest() {
  document.getElementById("selectionPage").classList.add("hidden")
  document.getElementById("testCreationPage").classList.remove("hidden")
  totalQuestions = 0

  for (let i = 1; i <= 4; i++) {
    const part = document.getElementById(`part${i}`)
    part.innerHTML = ""
    test[`part${i}`].forEach((question) => {
      const questionDiv = document.createElement("div")
      questionDiv.className = "question"
      questionDiv.innerHTML = `
                <h4><i class="fas fa-question-circle"></i> Question ${totalQuestions + 1}</h4>
                <h3>${question.type}</h3>
                <button class="delete-question" onclick="deleteQuestion(this)"><i class="fas fa-trash"></i></button>
                ${renderImportedQuestion(question)}
            `
      part.appendChild(questionDiv)
      totalQuestions++
    })
  }

  updateQuestionCount()
  currentPart = 1
  renderTestCreation()
}

function renderImportedQuestion(question) {
  switch (question.type) {
    case "One answer":
      return renderImportedOneAnswer(question)
    case "More than one answer":
      return renderImportedMultipleAnswer(question)
    case "Matching":
      return renderImportedMatching(question)
    case "Plan/Map/Diagram labelling":
      return renderImportedPlanMapDiagram(question)
    case "Note Completion":
      return renderImportedNoteCompletion(question)
    case "Form/Table Completion":
      return renderImportedFormTableCompletion(question)
    case "Flow chart Completion":
      return renderImportedFlowChartCompletion(question)
    default:
      return "<p>Unsupported question type</p>"
  }
}

function renderImportedOneAnswer(question) {
  return `
        <div class="t3-question-creator">
            <form class="t3-one-answer-form">
                <div class="t3-form-group">
                    <label for="t3-questionText">Question Text:</label>
                    <input type="text" id="t3-questionText" name="questionText" value="${question.content[0]}" required>
                </div>
                <div class="t3-form-group">
                    <label for="t3-options">Options (one per line):</label>
                    <textarea id="t3-options" name="options" rows="4" required>${question.content.slice(1).join("\n")}</textarea>
                </div>
                <div class="t3-form-group">
                    <label for="t3-correctAnswer">Correct Answer:</label>
                    <input type="text" id="t3-correctAnswer" name="correctAnswer" value="${question.correctAnswers}" required>
                </div>
            </form>
        </div>
    `
}

function renderImportedMultipleAnswer(question) {
  return `
        <div class="t4-container">
            <form id="t4-questionForm">
                <div class="t4-form-group">
                    <label for="t4-questionText">Question Text:</label>
                    <input type="text" id="t4-questionText" name="questionText" value="${question.content[0]}" required>
                </div>
                <div class="t4-form-group">
                    <label for="t4-options">Options (one per line):</label>
                    <textarea id="t4-options" name="options" rows="4" required>${question.content.slice(1).join("\n")}</textarea>
                </div>
                <div class="t4-form-group">
                    <label for="t4-correctAnswers">Correct Answers (comma-separated numbers):</label>
                    <input type="text" id="t4-correctAnswers" name="correctAnswers" value="${question.correctAnswers.join(", ")}" required>
                </div>
            </form>
        </div>
    `
}

function renderImportedMatching(question) {
  return `
        <div class="t3-question-creator">
            <form id="t3-questionForm">
                <div class="t3-form-group">
                    <label for="t3-questionTitle">Question Title:</label>
                    <input type="text" id="t3-questionTitle" name="questionTitle" value="${question.content[0]}" required>
                </div>
                <div class="t3-form-group">
                    <label for="t3-people">People (one per line):</label>
                    <textarea id="t3-people" name="people" required>${question.content[1]}</textarea>
                </div>
                <div class="t3-form-group">
                    <label for="t3-responsibilities">Responsibilities (one per line):</label>
                    <textarea id="t3-responsibilities" name="responsibilities" required>${question.content[2]}</textarea>
                </div>
                <div class="t3-form-group">
                    <label for="t3-correctAnswers">Correct Answers (one per line, in order of people):</label>
                    <textarea id="t3-correctAnswers" name="correctAnswers" required>${question.correctAnswers.join("\n")}</textarea>
                </div>
            </form>
        </div>
    `
}

function renderImportedPlanMapDiagram(question) {
  return `
        <div class="t1-ielts-creator">
            <form id="questionForm">
                <div class="t1-form-group">
                    <label for="questionType">Loại câu hỏi:</label>
                    <select id="questionType" required>
                        <option value="map" ${question.content[0] === "map" ? "selected" : ""}>Ghi nhãn Bản đồ</option>
                        <option value="ship" ${question.content[0] === "ship" ? "selected" : ""}>Sơ đồ Tàu</option>
                        <option value="technical" ${question.content[0] === "technical" ? "selected" : ""}>Sơ đồ Kỹ thuật</option>
                    </select>
                </div>
                <div class="t1-form-group">
                    <label for="instructions">Hướng dẫn:</label>
                    <textarea id="instructions" rows="3" required>${question.content[1]}</textarea>
                </div>
                <div class="t1-form-group">
                    <label for="imageFile">Hình ảnh đã tải lên:</label>
                    <img src="${question.content[2]}" alt="Uploaded image" style="max-width: 200px;">
                </div>
                <div id="answerInputs">
                    ${question.content
                      .slice(3)
                      .map(
                        (answer, index) => `
                        <div class="t1-form-group">
                            <label for="answer${index}">Câu trả lời ${index + 1}:</label>
                            <input type="text" id="answer${index}" value="${answer}" required>
                            <label for="correctAnswer${index}">Câu trả lời đúng cho câu ${index + 1}:</label>
                            <input type="text" id="correctAnswer${index}" value="${question.correctAnswers[index]}" required>
                        </div>
                    `,
                      )
                      .join("")}
                </div>
            </form>
        </div>
    `
}

function renderImportedNoteCompletion(question) {
  return `
        <div class="t2-listening-exercise-app">
            <div class="t2-listening-exercise-container">
                <div class="t2-listening-exercise-form-container">
                    <form id="t2ListeningExerciseForm">
                        <div class="t2-listening-exercise-form-group">
                            <label for="t2ListeningExerciseInstructions">Instructions:</label>
                            <input type="text" id="t2ListeningExerciseInstructions" name="instructions" value="${question.content[0]}">
                        </div>
                        <div class="t2-listening-exercise-form-group">
                            <label for="t2ListeningExerciseTopic">Topic:</label>
                            <input type="text" id="t2ListeningExerciseTopic" name="topic" value="${question.content[1]}">
                        </div>
                        <div id="t2ListeningExerciseQuestionContainer">
                            ${question.content
                              .slice(2)
                              .map(
                                (q, index) => `
                                <div class="t2-listening-exercise-form-group">
                                    <label for="t2ListeningExerciseQuestion${index + 1}">Question ${index + 1}:</label>
                                    <div class="t2-listening-exercise-answer-fields">
                                        <textarea id="t2ListeningExerciseQuestion${index + 1}" name="question${index + 1}">${q}</textarea>
                                    </div>
                                    <div class="t2-listening-exercise-correct-answers" id="t2ListeningExerciseCorrectAnswers${index + 1}">
                                        <span class="t2-listening-exercise-correct-answer-label">Correct Answer:</span>
                                        <input type="text" class="t2-listening-exercise-correct-answer-input" value="${question.correctAnswers[index]}">
                                    </div>
                                </div>
                            `,
                              )
                              .join("")}
                        </div>
                    </form>
                </div>
            </div>
        </div>
    `
}

function renderImportedFormTableCompletion(question) {
  return `
        <div class="t6-ielts-listening-creator">
            <div id="tableSection" class="t6-question-container">
                <textarea id="tableInstruction" rows="2">${question.content[0]}</textarea>
                <table id="fareTable">
                    <tr>
                        <th>Transport</th>
                        <th>Cash Fare</th>
                        <th>Card Fare</th>
                        <th>Correct Answer</th>
                        <th>Actions</th>
                    </tr>
                    ${question.content
                      .slice(1)
                      .map(
                        (row, index) => `
                        <tr>
                            <td><input type="text" value="${row[0]}"></td>
                            <td><input type="text" value="${row[1]}"></td>
                            <td><input type="text" value="${row[2]}"></td>
                            <td><input type="text" class="t6-correct-answer-input" value="${question.correctAnswers[index]}"></td>
                            <td><button class="t6-delete-btn">Delete</button></td>
                        </tr>
                    `,
                      )
                      .join("")}
                </table>
            </div>
        </div>
    `
}

function renderImportedFlowChartCompletion(question) {
  return `
        <div class="t7-ielts-flow-chart-creator">
            <form id="teacherForm">
                <label for="title">Title:</label>
                <input type="text" id="title" name="title" value="${question.content[0]}" required>

                <label for="instructions">Instructions:</label>
                <textarea id="instructions" name="instructions" required>${question.content[1]}</textarea>

                <div id="questionForms">
                    <div class="t7-question-form">
                        <h3>Question 1</h3>
                        <label for="flowItems1">Flow Chart Items (one per line, use ___ for gaps):</label>
                        <textarea id="flowItems1" name="flowItems1" required>${question.content[2]}</textarea>
                        <label for="options1">Options (one per line):</label>
                        <textarea id="options1" name="options1" required>${question.content[3]}</textarea>
                        <label for="correctAnswers1">Correct Answers (comma-separated):</label>
                        <input type="text" id="correctAnswers1" name="correctAnswers1" value="${question.correctAnswers.join(", ")}" required>
                    </div>
                </div>
            </form>
        </div>
    `
}

function setupDeleteButtons(container) {
  const deleteButtons = container.querySelectorAll(".t6-delete-btn")
  deleteButtons.forEach((button) => {
    button.addEventListener("click", function () {
      this.closest("tr").remove()
    })
  })
}

function updateT2ListeningExerciseCorrectAnswerFields(questionNumber) {
  const questionText = document.getElementById(`t2ListeningExerciseQuestion${questionNumber}`).value
  const correctAnswersContainer = document.getElementById(`t2ListeningExerciseCorrectAnswers${questionNumber}`)
  const answerCount = (questionText.match(/\[ANSWER\]/g) || []).length

  correctAnswersContainer.innerHTML = `
        <span class="t2-listening-exercise-correct-answer-label">Correct Answers:</span>
    `

  for (let i = 0; i < answerCount; i++) {
    correctAnswersContainer.innerHTML += `
            <input type="text" class="t2-listening-exercise-correct-answer-input" placeholder="Answer ${i + 1}">
        `
  }
}

// Initialize drag and drop functionality
function initializeDragAndDrop(container) {
  const options = container.querySelectorAll(".option")
  const gaps = container.querySelectorAll(".gap")

  options.forEach((option) => {
    option.addEventListener("dragstart", dragStart)
    option.addEventListener("dragend", dragEnd)
  })

  gaps.forEach((gap) => {
    gap.addEventListener("dragover", dragOver)
    gap.addEventListener("dragenter", dragEnter)
    gap.addEventListener("dragleave", dragLeave)
    gap.addEventListener("drop", drop)
  })
}

function dragStart(event) {
  event.dataTransfer.setData("text", event.target.textContent)
}

function dragOver(event) {
  event.preventDefault()
}

function dragEnter(event) {
  event.preventDefault()
  event.target.classList.add("drag-over")
}

function dragLeave(event) {
  event.target.classList.remove("drag-over")
}

function drop(event) {
  event.preventDefault()
  const data = event.dataTransfer.setData("text")
  event.target.textContent = data
  event.target.classList.remove("drag-over")
}

// Add to the existing styles
const styles = document.createElement("style")
styles.textContent = `
  .t6-form-group {
    margin-bottom: 1rem;
  }
  
  .t6-table-container {
    margin: 1rem 0;
    overflow-x: auto;
  }
  
  .t6-button-group {
    margin-top: 1rem;
  }
  
  .t6-save-btn {
    background-color: #2563eb;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
  }
  
  .t6-save-btn:hover {
    background-color: #1d4ed8;
  }
  
  .t6-notification {
    padding: 1rem;
    margin-top: 1rem;
    border-radius: 0.375rem;
  }
  
  .t6-notification-success {
    background-color: #dcfce7;
    color: #16a34a;
    border: 1px solid #16a34a;
  }
  
  .t6-notification-error {
    background-color: #fee2e2;
    color: #dc2626;
    border: 1px solid #dc2626;
  }
  
  #fareTable input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
  }
  
  .t6-delete-btn {
    background-color: #ef4444;
    color: white;
    padding: 0.25rem 0.5rem;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
  }
  
  .t6-delete-btn:hover {
    background-color: #dc2626;
  }
`
document.head.appendChild(styles)

